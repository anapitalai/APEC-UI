(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('dashjs')) :
    typeof define === 'function' && define.amd ? define('angular-dashjs-player', ['exports', '@angular/core', 'dashjs'], factory) :
    (factory((global['angular-dashjs-player'] = {}),global.ng.core,null));
}(this, (function (exports,i0,dashjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DashjsPlayerService = (function () {
        function DashjsPlayerService() {
        }
        DashjsPlayerService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        DashjsPlayerService.ctorParameters = function () { return []; };
        /** @nocollapse */ DashjsPlayerService.ngInjectableDef = i0.defineInjectable({ factory: function DashjsPlayerService_Factory() { return new DashjsPlayerService(); }, token: DashjsPlayerService, providedIn: "root" });
        return DashjsPlayerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DashjsPlayerComponent = (function () {
        function DashjsPlayerComponent() {
            this.autoload = true;
        }
        Object.defineProperty(DashjsPlayerComponent.prototype, "src", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._src = value;
                if (this.player && this.player.isPaused()) {
                    this.play();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DashjsPlayerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.player = dashjs.MediaPlayer().create();
                this.player.initialize(this.videoPlayer.nativeElement, this._src, this.autoload);
            };
        /**
         * @return {?}
         */
        DashjsPlayerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.player.reset();
            };
        /**
         * @return {?}
         */
        DashjsPlayerComponent.prototype.getPlayer = /**
         * @return {?}
         */
            function () {
                return this.player;
            };
        /**
         * @return {?}
         */
        DashjsPlayerComponent.prototype.play = /**
         * @return {?}
         */
            function () {
                this.player.play();
            };
        /**
         * @return {?}
         */
        DashjsPlayerComponent.prototype.pause = /**
         * @return {?}
         */
            function () {
                this.player.pause();
            };
        DashjsPlayerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'dashjs-player',
                        template: "<video #videoPlayer controls></video>\n",
                        styles: ["video{width:100%;height:100%}"]
                    },] },
        ];
        /** @nocollapse */
        DashjsPlayerComponent.ctorParameters = function () { return []; };
        DashjsPlayerComponent.propDecorators = {
            videoPlayer: [{ type: i0.ViewChild, args: ['videoPlayer',] }],
            autoload: [{ type: i0.Input }],
            src: [{ type: i0.Input }]
        };
        return DashjsPlayerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DashjsPlayerModule = (function () {
        function DashjsPlayerModule() {
        }
        DashjsPlayerModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [DashjsPlayerComponent],
                        exports: [DashjsPlayerComponent]
                    },] },
        ];
        return DashjsPlayerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.DashjsPlayerService = DashjsPlayerService;
    exports.DashjsPlayerComponent = DashjsPlayerComponent;
    exports.DashjsPlayerModule = DashjsPlayerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1kYXNoanMtcGxheWVyLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vYW5ndWxhci1kYXNoanMtcGxheWVyL2xpYi9kYXNoanMtcGxheWVyLnNlcnZpY2UudHMiLCJuZzovL2FuZ3VsYXItZGFzaGpzLXBsYXllci9saWIvZGFzaGpzLXBsYXllci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZGFzaGpzLXBsYXllci9saWIvZGFzaGpzLXBsYXllci5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEYXNoanNQbGF5ZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TWVkaWFQbGF5ZXIsIE1lZGlhUGxheWVyQ2xhc3N9IGZyb20gJ2Rhc2hqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Rhc2hqcy1wbGF5ZXInLFxuICB0ZW1wbGF0ZTogYDx2aWRlbyAjdmlkZW9QbGF5ZXIgY29udHJvbHM+PC92aWRlbz5cbmAsXG4gIHN0eWxlczogW2B2aWRlb3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlfWBdXG59KVxuZXhwb3J0IGNsYXNzIERhc2hqc1BsYXllckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHVibGljIHBsYXllcjogTWVkaWFQbGF5ZXJDbGFzcztcbiAgcHJpdmF0ZSBfc3JjOiBzdHJpbmc7XG5cbiAgQFZpZXdDaGlsZCgndmlkZW9QbGF5ZXInKSB2aWRlb1BsYXllcjogRWxlbWVudFJlZjtcbiAgQElucHV0KCkgYXV0b2xvYWQ6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBzZXQgc3JjKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zcmMgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5wbGF5ZXIgJiYgdGhpcy5wbGF5ZXIuaXNQYXVzZWQoKSkge1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnBsYXllciA9IE1lZGlhUGxheWVyKCkuY3JlYXRlKCk7XG4gICAgdGhpcy5wbGF5ZXIuaW5pdGlhbGl6ZSh0aGlzLnZpZGVvUGxheWVyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuX3NyYywgdGhpcy5hdXRvbG9hZCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnBsYXllci5yZXNldCgpO1xuICB9XG5cbiAgcHVibGljIGdldFBsYXllcigpOiBNZWRpYVBsYXllckNsYXNzIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXI7XG4gIH1cblxuICBwdWJsaWMgcGxheSgpOiB2b2lkIHtcbiAgICB0aGlzLnBsYXllci5wbGF5KCk7XG4gIH1cblxuICBwdWJsaWMgcGF1c2UoKTogdm9pZCB7XG4gICAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGFzaGpzUGxheWVyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXNoanMtcGxheWVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbRGFzaGpzUGxheWVyQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0Rhc2hqc1BsYXllckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgRGFzaGpzUGxheWVyTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIkluamVjdGFibGUiLCJNZWRpYVBsYXllciIsIkNvbXBvbmVudCIsIlZpZXdDaGlsZCIsIklucHV0IiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQU9FO1NBQWlCOztvQkFMbEJBLGFBQVUsU0FBQzt3QkFDVixVQUFVLEVBQUUsTUFBTTtxQkFDbkI7Ozs7O2tDQUpEOzs7Ozs7O0FDQUE7UUFzQkU7NEJBUjZCLElBQUk7U0FRaEI7UUFQakIsc0JBQWEsc0NBQUc7Ozs7Z0JBQWhCLFVBQWlCLEtBQWE7Z0JBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUNsQixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRTtvQkFDekMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNiO2FBQ0Y7OztXQUFBOzs7O1FBSUQsd0NBQVE7OztZQUFSO2dCQUNFLElBQUksQ0FBQyxNQUFNLEdBQUdDLGtCQUFXLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbEY7Ozs7UUFFRCwyQ0FBVzs7O1lBQVg7Z0JBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNyQjs7OztRQUVNLHlDQUFTOzs7O2dCQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQzs7Ozs7UUFHZCxvQ0FBSTs7OztnQkFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDOzs7OztRQUdkLHFDQUFLOzs7O2dCQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7OztvQkF2Q3ZCQyxZQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLGVBQWU7d0JBQ3pCLFFBQVEsRUFBRSx5Q0FDWDt3QkFDQyxNQUFNLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQztxQkFDMUM7Ozs7O2tDQUtFQyxZQUFTLFNBQUMsYUFBYTsrQkFDdkJDLFFBQUs7MEJBQ0xBLFFBQUs7O29DQWZSOzs7Ozs7O0FDQUE7Ozs7b0JBR0NDLFdBQVEsU0FBQzt3QkFDUixPQUFPLEVBQUUsRUFDUjt3QkFDRCxZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzt3QkFDckMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7cUJBQ2pDOztpQ0FSRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==