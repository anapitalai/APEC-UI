import { Injectable, Component, Input, ViewChild, NgModule, defineInjectable } from '@angular/core';
import { MediaPlayer } from 'dashjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DashjsPlayerService = /** @class */ (function () {
    function DashjsPlayerService() {
    }
    DashjsPlayerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    DashjsPlayerService.ctorParameters = function () { return []; };
    /** @nocollapse */ DashjsPlayerService.ngInjectableDef = defineInjectable({ factory: function DashjsPlayerService_Factory() { return new DashjsPlayerService(); }, token: DashjsPlayerService, providedIn: "root" });
    return DashjsPlayerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DashjsPlayerComponent = /** @class */ (function () {
    function DashjsPlayerComponent() {
        this.autoload = true;
    }
    Object.defineProperty(DashjsPlayerComponent.prototype, "src", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._src = value;
            if (this.player && this.player.isPaused()) {
                this.play();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DashjsPlayerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.player = MediaPlayer().create();
        this.player.initialize(this.videoPlayer.nativeElement, this._src, this.autoload);
    };
    /**
     * @return {?}
     */
    DashjsPlayerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.player.reset();
    };
    /**
     * @return {?}
     */
    DashjsPlayerComponent.prototype.getPlayer = /**
     * @return {?}
     */
    function () {
        return this.player;
    };
    /**
     * @return {?}
     */
    DashjsPlayerComponent.prototype.play = /**
     * @return {?}
     */
    function () {
        this.player.play();
    };
    /**
     * @return {?}
     */
    DashjsPlayerComponent.prototype.pause = /**
     * @return {?}
     */
    function () {
        this.player.pause();
    };
    DashjsPlayerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dashjs-player',
                    template: "<video #videoPlayer controls></video>\n",
                    styles: ["video{width:100%;height:100%}"]
                },] },
    ];
    /** @nocollapse */
    DashjsPlayerComponent.ctorParameters = function () { return []; };
    DashjsPlayerComponent.propDecorators = {
        videoPlayer: [{ type: ViewChild, args: ['videoPlayer',] }],
        autoload: [{ type: Input }],
        src: [{ type: Input }]
    };
    return DashjsPlayerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DashjsPlayerModule = /** @class */ (function () {
    function DashjsPlayerModule() {
    }
    DashjsPlayerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [DashjsPlayerComponent],
                    exports: [DashjsPlayerComponent]
                },] },
    ];
    return DashjsPlayerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { DashjsPlayerService, DashjsPlayerComponent, DashjsPlayerModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1kYXNoanMtcGxheWVyLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9hbmd1bGFyLWRhc2hqcy1wbGF5ZXIvbGliL2Rhc2hqcy1wbGF5ZXIuc2VydmljZS50cyIsIm5nOi8vYW5ndWxhci1kYXNoanMtcGxheWVyL2xpYi9kYXNoanMtcGxheWVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1kYXNoanMtcGxheWVyL2xpYi9kYXNoanMtcGxheWVyLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERhc2hqc1BsYXllclNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNZWRpYVBsYXllciwgTWVkaWFQbGF5ZXJDbGFzc30gZnJvbSAnZGFzaGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGFzaGpzLXBsYXllcicsXG4gIHRlbXBsYXRlOiBgPHZpZGVvICN2aWRlb1BsYXllciBjb250cm9scz48L3ZpZGVvPlxuYCxcbiAgc3R5bGVzOiBbYHZpZGVve3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9YF1cbn0pXG5leHBvcnQgY2xhc3MgRGFzaGpzUGxheWVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwdWJsaWMgcGxheWVyOiBNZWRpYVBsYXllckNsYXNzO1xuICBwcml2YXRlIF9zcmM6IHN0cmluZztcblxuICBAVmlld0NoaWxkKCd2aWRlb1BsYXllcicpIHZpZGVvUGxheWVyOiBFbGVtZW50UmVmO1xuICBASW5wdXQoKSBhdXRvbG9hZDogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHNldCBzcmModmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3NyYyA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnBsYXllciAmJiB0aGlzLnBsYXllci5pc1BhdXNlZCgpKSB7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucGxheWVyID0gTWVkaWFQbGF5ZXIoKS5jcmVhdGUoKTtcbiAgICB0aGlzLnBsYXllci5pbml0aWFsaXplKHRoaXMudmlkZW9QbGF5ZXIubmF0aXZlRWxlbWVudCwgdGhpcy5fc3JjLCB0aGlzLmF1dG9sb2FkKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucGxheWVyLnJlc2V0KCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGxheWVyKCk6IE1lZGlhUGxheWVyQ2xhc3Mge1xuICAgIHJldHVybiB0aGlzLnBsYXllcjtcbiAgfVxuXG4gIHB1YmxpYyBwbGF5KCk6IHZvaWQge1xuICAgIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgfVxuXG4gIHB1YmxpYyBwYXVzZSgpOiB2b2lkIHtcbiAgICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXNoanNQbGF5ZXJDb21wb25lbnQgfSBmcm9tICcuL2Rhc2hqcy1wbGF5ZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtEYXNoanNQbGF5ZXJDb21wb25lbnRdLFxuICBleHBvcnRzOiBbRGFzaGpzUGxheWVyQ29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBEYXNoanNQbGF5ZXJNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0lBT0U7S0FBaUI7O2dCQUxsQixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs4QkFKRDs7Ozs7OztBQ0FBO0lBc0JFO3dCQVI2QixJQUFJO0tBUWhCO0lBUGpCLHNCQUFhLHNDQUFHOzs7OztRQUFoQixVQUFpQixLQUFhO1lBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1lBQ2xCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUN6QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDYjtTQUNGOzs7T0FBQTs7OztJQUlELHdDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbEY7Ozs7SUFFRCwyQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ3JCOzs7O0lBRU0seUNBQVM7Ozs7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7Ozs7O0lBR2Qsb0NBQUk7Ozs7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDOzs7OztJQUdkLHFDQUFLOzs7O1FBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7O2dCQXZDdkIsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUseUNBQ1g7b0JBQ0MsTUFBTSxFQUFFLENBQUMsK0JBQStCLENBQUM7aUJBQzFDOzs7Ozs4QkFLRSxTQUFTLFNBQUMsYUFBYTsyQkFDdkIsS0FBSztzQkFDTCxLQUFLOztnQ0FmUjs7Ozs7OztBQ0FBOzs7O2dCQUdDLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsRUFDUjtvQkFDRCxZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztvQkFDckMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7aUJBQ2pDOzs2QkFSRDs7Ozs7Ozs7Ozs7Ozs7OyJ9